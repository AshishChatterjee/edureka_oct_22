sw installation instructions
https://drive.google.com/file/d/1qePm_HvYndSQ6tJkNhHN7hvek4iIi4zP/view?usp=sharing


jdk 1.8
https://www.oracle.com/in/java/technologies/javase/javase8-archive-downloads.html


maven
https://maven.apache.org/download.cgi


sts
https://dist.springsource.com/release/STS/index.html


mysql
https://dev.mysql.com/downloads/mysql/

sw req:
------------
jdk 1.8+ maven + sts + mysql + laptop 8gb/16gb + ssd


code :
https://github.com/rgupta00/edureka_oct_22

ppt pdf and other stuff:
https://drive.google.com/drive/folders/1ir7TQr3Pgq6WQN3jmbBGbMKF_6jRsSuC?usp=sharing

workshop on design pattern
https://drive.google.com/file/d/1_PjqGoSEnz9Ph-QoSnGTJ1gboJlIuZBj/view?usp=sharing

playlist on core java
https://www.youtube.com/playlist?list=PLv2-IhRmhbySgIQo3rH8KnclTSOYAp2xG


course plan:
------------

8 session 3X8=24hr



what is loose coupling and what is DI

passanger is using car to travel


You need to tell spring what depend on what? bean wiring?

1. xml
2. annotation
3. java configration


spring : jar files => we use maven to automatically download the jar 
	maven
	

anotation:

@Component		@Value		@Autowire



3 tier arch:-


	@Controller
	@RestController			@Service 		@Repository
	
	
	controller	<-----------------> service layer <------------> dao layer <----> db
	
	
	MVC: model view controller design pattern	


@Bean annotation vs @Component

When to use what?






















      
Bank application:
----------------
		
		
		
public interface AccountDao {
	public List<Account> getAll();
	public Account getById(int id);
	public void updateAccount(Account account);
	public void addAccount(Account account);
	public void deleteAccount(int id);
}


public class AccountDaoCollectionImpl implements AccountDao{
	private Map<Integer, Account> accounts=new HashMap<>();
	
	public AccountDaoCollectionImpl() {
		accounts.put(1, new Account(1, "raj", 560000.00));
		accounts.put(2, new Account(2, "ekta", 760000.00));
	}
	@Override
	public List<Account> getAll() {
		System.out.println("getAll using hard coded collection...");
		return new ArrayList<Account>(accounts.values());
	}

	@Override
	public Account getById(int id) {
		return accounts.get(id);
	}

	@Override
	public void updateAccount(Account account) {
		try {
			Thread.sleep(1000);
		}catch(InterruptedException e) {}
		accounts.put(account.getId(), account);
	}

	@Override
	public void addAccount(Account account) {
		
	}

	@Override
	public void deleteAccount(int id) {
		
	}
	

}




Session 2:
1. spring bean life cycle, aware interface
2. xml configuration in depth
3. java annotation config in depth
4. spring AOP aspectJ integration
5. spring jdbc , jdbc template


Spring is like a "glue" framework

spring + aspectJ (AOP framework)




Understand Depdendency Injection
_________________________________

What is the need of spring framework?
-----------------------------------

Lets take a example:

Rest 
Controller <------------ Service layer <---------- persistance layer <------ db

ravi team		sumit team			kapil team
								jdbc
								hibernate





what sping does it produce loose coupling between the layer 
Take example lets say ravi team creating controller layer, sumit team is creating service layer and kapil team is
creating persitance layer... now controller layer need service and service layer need persistance layer

as we have design our application as per interface and we have use DI therefore kapil team can change implemenation
of service layer ( let earlier they are using Jdbc now wnat to use hibernate ) without effectiving even a single line
of code in Service layer (sumit team) do you not think it is great...

beside that spring DI help to manage dependency of our project and make our project flexiable


						----------AccountDaoImplHib
						|
	AccountService <---------------- AccountDao-------AccountDaoImplJdbc
						|
						---------- AccountDaoImplUtil
						



=> we have to change the implementation ...whenever we swap dao layer :(


Spring BeanFactory vs ApplicationContext
______________________________________

 * BeanFactory:
 	 - light weight container , dont support many featues
 	  - dont use it
 BeanFactory applicationContext=new XmlBeanFactory(new ClassPathResource("demo.xml"));
 
 *  ApplicationContext 
  	- more powerful
    	ApplicationContext applicationContext=
				new ClassPathXmlApplicationContext("demo.xml");
				
	ApplicationContext
		-ClassPathXmlApplicationContext
		-FileSystemXmlApplicationContext
		-AnnotationConfigApplicationContext
		-XMLWebApplicationContext


spring bean configuration:
________________________
1. xml configuration
2. annotation configuration
3. java configuration


Understand Aspect Oriented Programming
______________________________________

	* If i need to take training at some client location, infra is provided by that client
		i need to only carray my laptop

	* help to achive high cohesion


 consider: we need to find how much time it take to execute code of service layer and do logging into a log file
  
 
Bank application:	

public interface AccountDao {
	public List<Account> getAll();
	public Account getById(int id);
	public void updateAccount(Account account);
	public void addAccount(Account account);
	public void deleteAccount(int id);
}


public class AccountDaoCollectionImpl implements AccountDao{
	private Map<Integer, Account> accounts=new HashMap<>();
	
	public AccountDaoCollectionImpl() {
		accounts.put(1, new Account(1, "amit", 1000.00));
		accounts.put(2, new Account(2, "sumit", 1000.00));
	}
	@Override
	public List<Account> getAll() {
		System.out.println("getAll using hard coded collection...");
		return new ArrayList<Account>(accounts.values());
	}

	@Override
	public Account getById(int id) {
		return accounts.get(id);
	}

	@Override
	public void updateAccount(Account account) {
		try {
			Thread.sleep(1000);
		}catch(InterruptedException e) {}
		accounts.put(account.getId(), account);
	}

	@Override
	public void addAccount(Account account) {
		
	}

	@Override
	public void deleteAccount(int id) {
		
	}

}


	@Controller	@Service			@repository
	@RestController
<------------------><--------------------><---------------------->		DB
	web		service				dao

List of most imp annotation :
-------------------------------

	@Component
		@Controller	@Service			@repository
		@RestController
		
	@Autowire
	@Value
	
	Life cycle of bean: @Lazy @Eager @PreDestroy @PostConstruct @Scope(....)
	
	@Profile	-Dspring.profiles.active=dev
	
AOP:
-----
	@EnableAspectJ...
	@Before @After @Around @AfterThrows @Aspect
	
	
	
	
	
	
Session 3: agenda
------------------
1. AOP and applications
2. jdbc quick revision, issues with jdbc
3. spring jdbc: jdbcTemplate how to do config in xml and java config


	
	
	Books :
	begining spring 4.x
	spring in action 4th edition
	
	https://www.amazon.in/Beginning-Spring-Mert-Caliskan/dp/1118892925
	https://github.com/andriyanov-roman/planet/blob/master/Craig%20Walls%20-%20Spring%20in%20Action%204th%20Edition%20-%202014.pdf
	
	
	
	
	how to do tx mgt in jdbc
	
	try{
	con.setAutoCommit(false);
	
	
	
	con.commit();
	}catch(..........){
		con.rollback();
	}
	
	
	
	
	
	
	
	
	What are the step for spring jdbc configration
	
------------------------------
1. put the relevent jar files
2. you need to configure jdbc connection with spring using property file
3. u need to confgure declearitive mgt

4. using jdbc template to reduce no of lines of code


	
	
	
	
	
	
	
	
	
	
	
@Configuration
@ComponentScan(basePackages = { "com.bankapp" })
//<context:component-scan base-package="com.bankapp"/>
@EnableAspectJAutoProxy // anno is used to integrate spring with aspectJ framework
@EnableTransactionManagement // hey spring i want that u should do declartive tx mgt
@PropertySource("classpath:db.properties")
public class AppConfig {

	@Value("${jdbc.url}")
	private String url;

	@Value("${jdbc.username}")
	private String username;

	@Value("${jdbc.password}")
	private String password;

	@Value("${jdbc.driver}")
	private String driverName;

	// i need to configure datasouce

	@Bean
	public DataSource getDataSource() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
		dataSource.setUrl(url);
		dataSource.setUsername(username);
		dataSource.setPassword(password);

		dataSource.setDriverClassName(driverName);
		return dataSource;

	}
	@Bean
	public DataSourceTransactionManager dataSourceTransactionManager(DataSource dataSource) {
		DataSourceTransactionManager dataSourceTransactionManager=new DataSourceTransactionManager();
		dataSourceTransactionManager.setDataSource(dataSource);
		return dataSourceTransactionManager;
	}
	
	//jdbcTemplate
	@Bean
	public JdbcTemplate jdbcTemplate(DataSource dataSource) {
		JdbcTemplate jdbcTemplate=new JdbcTemplate();
		jdbcTemplate.setDataSource(dataSource);
		return jdbcTemplate;
	}
}

log4j dependencies:
-------------------
     		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.7</version>
		</dependency>
		

AOP dependency:
-----------------
                  <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.6.9</version>
		</dependency>
		<!-- to support AOP: aspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.1</version>
		</dependency>



Spring jdbc:
-------------

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.bankapp"/>
	<aop:aspectj-autoproxy/>
	
	<context:property-placeholder location="classpath:db.properties"/>
	
	<bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!--configuration of jdbcTemplate -->
	
	<tx:annotation-driven transaction-manager="transactionManager"/>	
</beans>















//	@Override
//	public List<Account> getAll() {
//		List<Account> accounts = new ArrayList<Account>();
//
//		Connection connection = null;
//		try {
//			connection = dataSource.getConnection();
//			// now i want to print all records
//			Statement stmt = connection.createStatement();
//			ResultSet rs = stmt.executeQuery("select * from account");
//
//			while (rs.next()) {
//				accounts.add(new Account(rs.getInt(1), rs.getString(2), rs.getDouble(3)));
//			}
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			if (connection != null) {
//				try {
//					connection.close();
//				} catch (SQLException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			}
//		}
//
//		return accounts;
//
//	}








session 4: pls revise hibernate basics
-----------------------------------------
Pre req:
 *basic understanding of hibernate
 * basic of servlet api, tomcat configure vs weblogic
 
1. hibernate jpa quick intro, issue with hibernate
2. spring hibernate integration
3. Servlet jsp tomcat
4. spring mvc fundamentals


	:)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
Hibernate hello world:
--------------------

<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.2.9.Final</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.47</version>
		</dependency>
		






8.0.28

hibernate.cfg.xml
----------------
	
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>
		<!-- database connection setting -->
		<property name="connection.url">jdbc:mysql://localhost:3306/edu123</property>
		<property name="connection.username">root</property>
		<property name="connection.password">root</property>
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</property>

		<!-- disable the second level cache -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>
		<property name="show_sql">true</property>

		<property name="format_sql">true</property>
		<!-- validate , create, create-drop udate -->
		<property name="hibernate.hbm2ddl.auto">validate</property>
		<!-- jdbc connection pool build in  -->
		<property name="connection.pool_size">10</property>
		<!-- hey hiberante create a new hibernate session and put that into context of current thread -->
		<property name="current_session_context_class">thread</property>
	
		<mapping class="com.crud.Account" />
	
	</session-factory>
</hibernate-configuration>


creating session factory:
------------------------

public class HibernateSessionFactory {
	static SessionFactory factory = null;

	private HibernateSessionFactory() {
	}

	public static SessionFactory getSessionFactory() {
		StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
				.configure("hibernate.cfg.xml")
				.build();

		 factory = new MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();
		 return factory;
	}
}



public class Account {
	private int id;
	private String name;
	private Double balance;
}
	













Hibernate + spring integration:
------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.bankapp"/>
	<aop:aspectj-autoproxy/>
	
	<context:property-placeholder location="classpath:db.properties"/>
	
	<bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<bean id="sf" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="ds"/>
		<property name="packagesToScan">
			<list>
				<value>com.bankapp.entities</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sf"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>	<!-- hey spring i wnant to do declartive tx -->
</beans>




   @Bean
	public LocalSessionFactoryBean getLocalSessionFactoryBean(DataSource dataSource) {
		LocalSessionFactoryBean lsb=new LocalSessionFactoryBean();
		lsb.setDataSource(dataSource);
		lsb.setPackagesToScan(new String[] {"com.bankapp.model.dao"});
		lsb.setHibernateProperties(getHibernateProperties());
		return lsb;
	}
	private Properties getHibernateProperties() {
		Properties properties=new Properties();
		properties.setProperty("hibernate.hbm2ddl.auto", "update");
		properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL57Dialect");
		properties.setProperty("hibernate.show_sql", "true");
		properties.setProperty("hibernate.format_sql", "true");
		
		return properties;
	}

	
	@Bean
	public HibernateTransactionManager getHibernateTransactionManager(SessionFactory sessionFactory) {
		HibernateTransactionManager ht=new HibernateTransactionManager();
		ht.setSessionFactory(sessionFactory);
		return ht;
	}








Session 5 plan:
------------------
* spring mvc in details

	<--------------><-------><---------------> db
	web		service	dao layer
 CRUD operation
 
*Spring REST: how to create rest end points

*Spring Boot








Session 5:
1. spring MVC arch xml config vs java config
2. Spring mvc crud applicatation
3. Spring REST mvc
4. spring boot basics





Displaying all accounts:
----------------------


accounts.jsp
--------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Champs bank app</title>
</head>
<body>
	<table border="1">
		<thead>
			<tr>
				<th>accout id</th>
				<th>account holder name</th>
				<th>account balance</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach items="${accountsList}" var="account">
				<tr>
					<td>${account.id}</td>
					<td>${account.name}</td>
					<td>${account.balance}</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
	<br>
	<a href="transfer">transfer request</a>
</body>
</html>








Spring JSP application:
-----------------------


@Controller
public class AccountController {

	private AccountService accountService;

	@Autowired
	public AccountController(AccountService accountService) {
		this.accountService = accountService;
	}

	

	@GetMapping(path = "accounts")
	public String allAccountsV2(ModelMap model) {
		model.addAttribute("accountsList", accountService.getAll());
		return "accounts";
	}


	@GetMapping(value = "transfer")
	public String showAccountTransferForm(ModelMap map) {
		map.addAttribute("accountDto", new AccountDto());
		return "accountform";
	}

	//correct way
	@PostMapping(value = "transfer")
	public String submittedAccountTransferForm(AccountDto accountDto, Model model) {
		
		accountService.transfer(accountDto.getFrom(), accountDto.getTo(), accountDto.getMoney());
		model.addAttribute("accountDto", accountDto);//i am putting the data  into req scope
		return "redirect:transfersuccess";
		//redirect:transfersuccess used to do redirect to the url (not the jsp page) transfersuccess
		
	}
	

	@GetMapping(value = "transfersuccess")
	public String transfersuccessMethod() {
		return "transfersuccess";
	}

}





accountform.jsp
-----------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"  %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Champ bank fund tranfer</title>
</head>
<body>
<form:form action="transfer" method="post" modelAttribute="accountDto">
	Enter from account:<form:input path="from"/><br/>
	Enter to amount:<form:input path="to"/><br/>
	Enter money to transfer:<form:input path="money"/><br/>
	<input type ="submit"/>
</form:form>

</body>
</html>






transfersuccess.jsp
-------------------
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Champ bank app transfer message</title>
</head>
<body>
fund is transfer successfully
${accountDto.from }<br/>
${accountDto.to }<br/>
${accountDto.money }<br/>
<a href="accounts">all accounts</a>
</body>
</html>






Session 6:
===============
	spring boot 
	:)
	all can be revised in one session :)
	REST
	
session 7:
	Spring sec + boot + jwt
	
	
session 8:

	how to use spring integration
	How to get startd wtih Spring microservice
	
	
	Road map: for next 6month
	
	













Spring boot bank application:
---------------------------------

Step 1: add dependencies

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
	<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
	</dependency>



Step 2: add to property file

spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp



	












some video to refer:


hibernate orm basics in depth
https://zoom.us/rec/share/MWZ6Jb_ECzKj3KIX-wHRO94NiZZwLp9TaiA0XFEkAI02uqo3k2U3WhjA1R_viNC4.rxXph1RFWXkJNCAY?startTime=1625543731000
https://zoom.us/rec/share/j56PZW0wGWcHvFDM9wxXdseVM2QNT-9zUXFpt6YX-CKF-C28yG5t77ApIzX5Dva7.JiofD-rVWybOjQAi?startTime=1625566967000



servlet jsp basics in depth
https://zoom.us/rec/share/XRIE9P7wi6MA91naGoO_APm-ZSchc0EiTuqBVUJpsjeRAS_TqOGHAhE4WFfCUMPw.IAtC6bGu8N0k_5Ys?startTime=1625630103000
https://zoom.us/rec/share/Cz1iqlxI1MACoypVXXNMqE3_Q159651zm0RVhRfSbSQ9MExzt6dCxpvDtideg253.TarMIv5NZm6q1FqP?startTime=1625655158000


















